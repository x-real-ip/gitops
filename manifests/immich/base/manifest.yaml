---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: pv-iscsi-immich-db
  labels:
    app: immich-database
spec:
  storageClassName: "freenas-iscsi-manual-csi"
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  csi:
    driver: org.democratic-csi.node-manual
    readOnly: false
    fsType: xfs
    volumeHandle: pv-iscsi-immich-db
    volumeAttributes:
      portal: truenas-master.lan.stamx.nl:3260
      iqn: iqn.2005-10.org.freenas.ctl:immich-database
      lun: "0"
      node_attach_driver: iscsi
      provisioner_driver: node-manual

---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: pv-nfs-immich-library
  labels:
    app: immich
spec:
  storageClassName: "freenas-nfs-manual-csi"
  capacity:
    storage: 600Gi
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  mountOptions:
    - nfsvers=4
    - nolock
    - noatime
  csi:
    driver: org.democratic-csi.node-manual
    readOnly: false
    fsType: nfs
    volumeHandle: pv-nfs-immich-library
    volumeAttributes:
      server: truenas-master.lan.stamx.nl
      share: /mnt/ssd/containers/k8s/immich-media
      node_attach_driver: nfs
      provisioner_driver: node-manual

---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: pvc-iscsi-immich-db
  labels:
    app: immich-database
spec:
  storageClassName: freenas-iscsi-manual-csi
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  volumeName: pv-iscsi-immich-db

---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: pvc-nfs-immich-library
  labels:
    app: immich
spec:
  storageClassName: freenas-nfs-manual-csi
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 600Gi
  volumeName: pv-nfs-immich-library

---
kind: SealedSecret
apiVersion: bitnami.com/v1alpha1
metadata:
  name: immich-secret-env
  namespace: tools
  labels:
    app: immich
spec:
  encryptedData:
    DB_PASSWORD: AgDW7KPYuVmt1IHruDB5e9JRNLVN/eTZewqSvN1H0X1XfmGMZr5dB1X1f3uxX4z/WqteGv8hii41k2iXGJHOwEnWDFD1GIBBFtvH/JMNoPwunZ+5qZkDRgnkd/8bZGwQpbf4wYulF6WxvmcnsBbzJ2xXQAPDrmfN5VM2Im+ETaIqvfoBgblJmTMto1xp269CoM+X5t34eJivF/CqXLzUCUKBOyv5ZOFRH+pFUh5Wsrizdd5AjuWOjmxGBY+85OZU45+gLmTYUi+ptslaurCE2iJu2QAMLOZH9FYf9KeE+eYynFiPUegEag3mbANCluqbsvJ2duedSKjGXfg4eGyrvCskX2/H7mUgznqzHf9a0UQJoY9XjB2K8JjkGM/69lYiBf+U5tFpMxlJuOTNPXhNqvX0DFk9GrdTxzSjedfpkrI++7bUeRxRLtG9k4IsIADxIc682yiZPH2WfyCmIbOEkxCXPKNICLfGAr0K17BQM+xJVbEkFD+GD45vAq+3d5F3tTRBJZi914ZF9jZJCZqILZrGHw7VZtvgsXqq56azVUGg0yJL9hPv4gIN9BAcuveZOnN7GGO3Z7/q52WQ153eGm/TWf1qNUAr3TZhV99fFlvPPv7fhcASAKhGG+gWyu4Z40xXVdNSN4dmBt26f53rIw1B3/9pplGuaSD6wpy7ZjehCvpG9idLzFgjvJGrgR2ZyL861wxF3cKFrHxJ
  template:
    type: Opaque
    metadata:
      labels:
        app: immich
      name: immich-secret-env
      namespace: tools

---
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  labels:
    app: immich-server
  name: immich-config
spec:
  encryptedData:
    notifications_smtp_from: AgCb2v56oa6Tc2IWO1eaTkc+D3xmFyxHIZOMKXbQd0rRmX2Wcy3Qqf6Tcy0nvpwZWnELdo1tZGHtOCCu21GxfBdxEO2XlCNLVJVzdc42Av8LJ+6kYo5aai53MrN6ipmeIdtWzpANmnVA3USdO+inPb7YwzG4CO+x7iEq3fWtQsl0S1euwfi/hFzL/m6tWFxOxAa2SGv8rw1O8mydYsOJ+7xfMH2PuQciK5F5C4sNGY8wAL6vSG3wPLzeuaj3WPKGrEUc6ETq+Yg0B4EbYjL1pGvHh0sPjrLKx7uOtrs0JIrDlNcj76Y+/Je12QmE+IiumnzgaOWHvD3bQRXVTbeFA2rIYmqMwVVSGGsB8BoVcQHhHP8w5oqe3rT+IHBVyNOwEjc54qpeP994046JdzHvscTPLajBAFjNc5sA3gpEYd5I2+hlPWIfrGnwCvg379gtvb58hVnSw3RKYlCKf2e+P93T0FQGlZZhT12XlXO3TM0EyKK/g6dXjTPd4n1XtTzkw62+5RvGWxKRElKOTKjInC74TZCbm9n31qlDtT4Jhv+rVdTB1MtgzNFYa0o/evrjRiJBQReO2DZP8PKAQ0V8mJ/2Yq5Zs375FnhqBf13sUcV1iOvbjQXo+740kM2/psrL7/rBiQXB35yEXwy5D2g1n4Yaoph7BdvbD9BKdO3esErZ3a99/E8bUi9FVRt4l8VHFSmtJso4PvPZh4lmMFSelMgtQ==
    notifications_smtp_transport_password: AgBpwrheEaUcJfQBup0orAlTSeEd/sgteKYHIfIcvaCLWYxTfHQe427Be05oxUhGvvoT2OH5IYFTqwmmq8kuSMvrAbZ55rbSSPO2APVONfnS+14VhUrmvacqZRwtiINEuPX5tda2V67YxUUGxv8HnGtOLO5iJkzgeskwGFNCFC5JrLFNfTXS1CW76Ocst7KGGK6DZDJQHxn0uljhrZIg58wH2tq9TMeE9dfTnrUsqGy3+6x4XfYapLepOM4gxXVJG/b1NZOFpSgaQ+sOQ6C6h/UicVoQ1/Gu9FuBcQssCkuVqWDEMit67hVWl+W66HVhfXAdYUcsdXUA7X76lC4C1snDWLxDJ1PDcdE0hZ133KB0SESTUDTe0XlSUyr4TFdr5e7KyI8ABC1bd6y8yQFm0doBLkf3922K+fbuXWuTqqPL7ZGRpE5b+tQNXuKumM5exvBFMJvEbcGnraYqdZX9wHGF8wtmlpuG0e0bMyBls+2BskfmElH2w3yJOeSa+L1/aLAOPnixqgaytQUeyc5PjVC5gZlxdoOI+aHPvLUAfNUxEBfomXnhbwLHjJovhLqsu25KPcok/f+OJzHL6sWvC+pQ9K5O4JQZcyh9wzOf3Wjv1P3eF5yXhwbFD6/JKVRhaCRXM2CDmU9Lgtic/1aqLMJGoqzOkGq50SQmHMvodvV29TsMRFOZKPnCkoqZ0DbwNJjkQ2uN47fYCnPNGMqnWTOT2wpR62ht
    notifications_smtp_transport_username: AgCvy1PFuyXV6PGp/Lvy8i/xQFwEnk0o7zUJLeHT9qkUoPl6gFM98CHPz9R0YBPPbFu3wPjOdsq1G9p/P6rP/I5S2zUT4HBUaKFq8ezzSKo9Su7WZfWiDPQuZ2f9oypWXMGrpQpDH5B4Yhs0QXMs3GpA0jlmDZNY/n72wWP5sAAd2zH3M39lKj6mw3LhfKxbZtdQNygaS+GjLxRx8mK9DiyOOpRsipy5Pp8TrGUL2YHrGWaqhw2HeHA88O8C942nv3ovd/Gw0JDu5mPSH+ySIM8WmHR/ecVa4pfvxAtqnH7Q2qdId2TiNATWgHubnFYGjejmy3a48ywlSUjn0W0U+lKlilwgyyESTwe8FwvrYK87WUTFPKLVS1NxsHzDGd1o2buBwJfGPxxHGDUWgSEg8j/hAEnoF7EmbUr06vXX5QG+ILncgFtzyrJvai2WJ9swn61GpJAMQne3Dp0VCqCdmLqDVjXJNzt/PoEozN0OVCUkrWCzuBYRUAuEJReDu4hRzNPM38aQJ3OPRe+tzr/ojsyoutStxzkEHYyRsnZIY7vAIPRsMnZsSwvPVSTvbXTuPKunKOPsRzjXEPLCvnuDS73ln8dkCIoLzB5La3CqzCnS0GORwgop0To0pgZWWQSAPjn1S7MYn4iBJ9R5Jm63EBQTOMUWvEXzK8fOcxw0to3f1H1NNATGHOqk35IBVsrB0s+sjdtTUApHEVaX4yM=
  template:
    data:
      immich-config.json: |-
        {
          "ffmpeg": {
            "crf": 23,
            "threads": 0,
            "preset": "ultrafast",
            "targetVideoCodec": "h264",
            "acceptedVideoCodecs": ["h264"],
            "targetAudioCodec": "aac",
            "acceptedAudioCodecs": ["aac", "mp3", "libopus", "pcm_s16le"],
            "acceptedContainers": ["mov", "ogg", "webm"],
            "targetResolution": "720",
            "maxBitrate": "0",
            "bframes": -1,
            "refs": 0,
            "gopSize": 0,
            "npl": 0,
            "temporalAQ": false,
            "cqMode": "auto",
            "twoPass": false,
            "preferredHwDevice": "auto",
            "transcode": "required",
            "tonemap": "hable",
            "accel": "disabled",
            "accelDecode": false
          },
          "job": {
            "backgroundTask": {
              "concurrency": 5
            },
            "smartSearch": {
              "concurrency": 2
            },
            "metadataExtraction": {
              "concurrency": 1
            },
            "faceDetection": {
              "concurrency": 2
            },
            "search": {
              "concurrency": 5
            },
            "sidecar": {
              "concurrency": 1
            },
            "library": {
              "concurrency": 1
            },
            "migration": {
              "concurrency": 1
            },
            "thumbnailGeneration": {
              "concurrency": 1
            },
            "videoConversion": {
              "concurrency": 1
            },
            "notifications": {
              "concurrency": 5
            }
          },
          "logging": {
            "enabled": true,
            "level": "log"
          },
          "machineLearning": {
            "enabled": true,
            "url": "http://immich-machine-learning:3003",
            "clip": {
              "enabled": true,
              "modelName": "ViT-B-32__openai"
            },
            "duplicateDetection": {
              "enabled": true,
              "maxDistance": 0.01
            },
            "facialRecognition": {
              "enabled": true,
              "modelName": "buffalo_l",
              "minScore": 0.7,
              "maxDistance": 0.5,
              "minFaces": 3
            }
          },
          "map": {
            "enabled": true,
            "lightStyle": "https://tiles.immich.cloud/v1/style/light.json",
            "darkStyle": "https://tiles.immich.cloud/v1/style/dark.json"
          },
          "reverseGeocoding": {
            "enabled": true
          },
          "metadata": {
            "faces": {
              "import": false
            }
          },
          "oauth": {
            "autoLaunch": false,
            "autoRegister": true,
            "buttonText": "Login with OAuth",
            "clientId": "",
            "clientSecret": "",
            "defaultStorageQuota": 0,
            "enabled": false,
            "issuerUrl": "",
            "mobileOverrideEnabled": false,
            "mobileRedirectUri": "",
            "scope": "openid email profile",
            "signingAlgorithm": "RS256",
            "profileSigningAlgorithm": "none",
            "storageLabelClaim": "preferred_username",
            "storageQuotaClaim": "immich_quota"
          },
          "passwordLogin": {
            "enabled": true
          },
          "storageTemplate": {
            "enabled": true,
            "hashVerificationEnabled": true,
            "template": "{{y}}/{{MM}}/{{y}}{{MM}}{{dd}}_{{H}}{{mm}}{{ss}}_{{filetype}}_{{filename}}"
          },
          "image": {
            "thumbnail": {
              "format": "webp",
              "size": 250,
              "quality": 80
            },
            "preview": {
              "format": "jpeg",
              "size": 1440,
              "quality": 80
            },
            "colorspace": "p3",
            "extractEmbedded": false
          },
          "newVersionCheck": {
            "enabled": true
          },
          "trash": {
            "enabled": true,
            "days": 30
          },
          "theme": {
            "customCss": ""
          },
          "library": {
            "scan": {
              "enabled": true,
              "cronExpression": "0 0 * * *"
            },
            "watch": {
              "enabled": false
            }
          },
          "server": {
            "externalDomain": "",
            "loginPageMessage": ""
          },
          "notifications": {
            "smtp": {
              "enabled": true,
              "from": "{{ index . "notifications_smtp_from" }}",
              "replyTo": "",
              "transport": {
                "ignoreCert": true,
                "host": "protonmail-bridge-smtp.tools.svc.cluster.local",
                "port": 587,
                "username": "{{ index . "notifications_smtp_transport_username" }}",
                "password": "{{ index . "notifications_smtp_transport_password" }}"
              }
            }
          },
          "user": {
            "deleteDelay": 7
          }
        }
    metadata:
      labels:
        app: immich-server
      name: immich-config

---
kind: ConfigMap
apiVersion: v1
metadata:
  name: immich-env
  labels:
    app: immich
data:
  DB_DATABASE_NAME: "immich"
  DB_HOSTNAME: "immich-database"
  DB_USERNAME: "immich"
  IMMICH_MACHINE_LEARNING_URL: "http://immich-machine-learning:3003"
  REDIS_HOSTNAME: "redis-hl.tools.svc.cluster.local"
  REDIS_PORT: "6379"
  REDIS_DBINDEX: "0"
  REDIS_PASSWORD: ""
  DISABLE_REVERSE_GEOCODING: "false"
  REVERSE_GEOCODING_PRECISION: "2"
  PUBLIC_LOGIN_PAGE_MESSAGE: ""
  PUID: "1000"
  PGID: "2000"
  IMMICH_CONFIG_FILE: "/opt/immich/immich-config.json"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: immich-database
  labels:
    app: immich-database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: immich-database
  template:
    metadata:
      labels:
        app: immich-database
    spec:
      containers:
        - name: immich-postgres
          image: "ghcr.io/immich-app/postgres:14-vectorchord0.3.0-pgvectors0.2.0"
          imagePullPolicy: Always
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_USER
              valueFrom:
                configMapKeyRef:
                  name: immich-env
                  key: DB_USERNAME
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: immich-secret-env
                  key: DB_PASSWORD
            - name: POSTGRES_DB
              valueFrom:
                configMapKeyRef:
                  name: immich-env
                  key: DB_DATABASE_NAME
          volumeMounts:
            - name: pgdata
              mountPath: /var/lib/postgresql/data
          resources: {}
      volumes:
        - name: pgdata
          persistentVolumeClaim:
            claimName: pvc-iscsi-immich-db

---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: immich-server
  labels:
    app: immich-server
spec:
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: immich-server
  template:
    metadata:
      labels:
        app: immich-server
    spec:
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  app: immich-database
              topologyKey: "kubernetes.io/hostname"
      securityContext:
        fsGroup: 2000
      serviceAccountName: default
      dnsPolicy: ClusterFirst
      initContainers:
        - name: postgresql-isready
          image: "ghcr.io/immich-app/postgres:14-vectorchord0.3.0-pgvectors0.2.0"
          imagePullPolicy: Always
          env:
            - name: POSTGRES_USER
              valueFrom:
                configMapKeyRef:
                  name: immich-env
                  key: DB_USERNAME
            - name: POSTGRES_DB
              valueFrom:
                configMapKeyRef:
                  name: immich-env
                  key: DB_DATABASE_NAME
          command:
            - /bin/sh
            - -c
            - until pg_isready -U "${POSTGRES_USER}" -d "dbname=${POSTGRES_DB}"
              -h immich-database -p 5432 ; do sleep 2 ; done
      containers:
        - name: immich-server
          image: "ghcr.io/immich-app/immich-server:release"
          imagePullPolicy: Always
          securityContext:
            runAsUser: 1000
          ports:
            - name: http
              containerPort: 2283
              protocol: TCP
          env:
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: immich-secret-env
                  key: DB_PASSWORD
          envFrom:
            - configMapRef:
                name: immich-env
                optional: false
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /api/server/ping
              port: http
            initialDelaySeconds: 0
            periodSeconds: 10
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /api/server/ping
              port: http
            initialDelaySeconds: 0
            periodSeconds: 10
            timeoutSeconds: 1
          startupProbe:
            failureThreshold: 30
            httpGet:
              path: /api/server/ping
              port: http
            initialDelaySeconds: 0
            periodSeconds: 10
            timeoutSeconds: 1
          volumeMounts:
            - name: immich-config
              mountPath: /opt/immich
            - name: library
              mountPath: /usr/src/app/upload
          resources: {}
      volumes:
        - name: immich-config
          secret:
            secretName: immich-config
        - name: library
          persistentVolumeClaim:
            claimName: pvc-nfs-immich-library

---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: immich-machine-learning
  labels:
    app: immich-machine-learning
spec:
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: immich-machine-learning
  template:
    metadata:
      labels:
        app: immich-machine-learning
    spec:
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  app: immich-database
              topologyKey: "kubernetes.io/hostname"
      securityContext:
        fsGroup: 2000
      serviceAccountName: default
      automountServiceAccountToken: true
      dnsPolicy: ClusterFirst
      enableServiceLinks: true
      containers:
        - name: immich-machine-learning
          image: "ghcr.io/immich-app/immich-machine-learning:release"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 3003
              protocol: TCP
          env:
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: immich-secret-env
                  key: DB_PASSWORD
            - name: TRANSFORMERS_CACHE
              value: /cache
          envFrom:
            - configMapRef:
                name: immich-env
                optional: false
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /ping
              port: http
            initialDelaySeconds: 0
            periodSeconds: 10
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /ping
              port: http
            initialDelaySeconds: 0
            periodSeconds: 10
            timeoutSeconds: 1
          startupProbe:
            failureThreshold: 60
            httpGet:
              path: /ping
              port: http
            initialDelaySeconds: 0
            periodSeconds: 10
            timeoutSeconds: 1
          volumeMounts:
            - name: cache
              mountPath: /cache
          resources: {}
      volumes:
        - name: cache
          emptyDir: {}

---
kind: Service
apiVersion: v1
metadata:
  name: immich-database
  labels:
    app: immich-database
spec:
  type: ClusterIP
  selector:
    app: immich-database
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: 5432

---
kind: Service
apiVersion: v1
metadata:
  name: immich-machine-learning
  labels:
    app: immich-machine-learning
spec:
  type: ClusterIP
  selector:
    app: immich-machine-learning
  ports:
    - port: 3003
      targetPort: 3003
      protocol: TCP

---
kind: Service
apiVersion: v1
metadata:
  name: immich-server
  labels:
    app: immich-server
spec:
  type: ClusterIP
  selector:
    app: immich-server
  ports:
    - name: http
      port: 2283
      targetPort: http
      protocol: TCP

---
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: immich-private
  labels:
    app: immich
  annotations:
    nginx.ingress.kubernetes.io/proxy-body-size: 20480m
spec:
  ingressClassName: nginx-private
  rules:
    - host: "photos.lan.stamx.nl"
      http:
        paths:
          - path: "/"
            pathType: Prefix
            backend:
              service:
                name: immich-server
                port:
                  name: http
  # tls:
  #   - hosts:
  #       - "photos.lan.stamx.nl"
  #     secretName: tls-wildcard-lan-stamx-nl
